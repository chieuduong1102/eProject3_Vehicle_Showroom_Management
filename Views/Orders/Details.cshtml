@model eProject3_Vehicle_Showroom_Management.Models.DTO.OrderDTO
@using eProject3_Vehicle_Showroom_Management.Constants
<style>
    td > .status-pending {
        background-color: #f39c12 !important;
        padding: 3px !important;
        border-radius: 2px !important;
        font-weight: bold;
    }

    td > .status-cancel {
        background-color: #e74c3c !important;
        padding: 3px !important;
        border-radius: 2px !important;
        font-weight: bold;
    }

    td > .status-accept {
        background-color: #3498db !important;
        padding: 3px !important;
        border-radius: 2px !important;
        font-weight: bold;
    }

    td > .status-received {
        background-color: #2ecc71 !important;
        padding: 3px !important;
        border-radius: 2px !important;
        font-weight: bold;
    }
</style>

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
}
@functions{
    String GenerateOrderId(int id)
    {
        return DateTime.Now.ToString("yyyyMMddHHmmss") + id;
    }

    String GenerateStringOrderStatus(int status)
    {
        switch (status)
        {
            case (int)EnumOrderStatus.Pending:
                return "pending";
                break;
            case (int)EnumOrderStatus.Cancel:
                return "cancel";
                break;
            case (int)EnumOrderStatus.Accept:
                return "accept";
                break;
            case (int)EnumOrderStatus.Received:
                return "received";
                break;
            default:
                return "pending";
                break;
        }
    }
}


<h2>Details</h2>

<div>
    <h4>OrderCode: @GenerateOrderId(Model.Id)</h4>
    <hr />
    <div class="col-md-6">
        <table class="table">
            <tr>
                <td>@Html.DisplayNameFor(model => model.Fullname)</td>
                <td>@Html.DisplayFor(model => model.Fullname)</td>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.Email)</td>
                <td>@Html.DisplayFor(model => model.Email)</td>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.PhoneNumber)</td>
                <td>@Html.DisplayFor(model => model.PhoneNumber)</td>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.DeliveryAddress)</td>
                <td>@Html.DisplayFor(model => model.DeliveryAddress)</td>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.CreatedDate)</td>
                <td>@Html.DisplayFor(model => model.CreatedDate)</td>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.Status)</td>
                <td><span class="status-@GenerateStringOrderStatus(Model.Status)">@GenerateStringOrderStatus(Model.Status).ToUpper()</span></td>
            </tr>
            <tr>
                <td>Order Details</td>
                <td>
                    <table class="table">
                        <tr>
                            <td>ProductName</td>
                            <td>Quantily</td>
                            <td>TotalPrice</td>
                        </tr>
                        @foreach (var item in Model.ListOrderDetails)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.Product.ProductName)</td>
                                <td>x @Html.DisplayFor(modelItem => item.Quantily)</td>
                                <td>@Html.DisplayFor(modelItem => item.TotalPrice) $</td>
                            </tr>
                        }
                    </table>
                </td>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(model => model.TotalPrice)</td>
                <td>@Html.DisplayFor(model => model.TotalPrice)</td>
            </tr>
        </table>
    </div>
</div>
<p>
    @Html.ActionLink("< Back to List", "Index")
</p>
